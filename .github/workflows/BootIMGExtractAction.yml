name: 提取 boot.img 和 init_boot.img

on:
  workflow_dispatch:
    inputs:
      rom_url:
        description: 'ROM 下载直链'
        required: true
        default: '卡刷包链接'

jobs:
  EXTRACT_IMAGES:
    runs-on: ubuntu-latest
    steps:
      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y aria2 unzip wget
          # 下载预编译的 payload-dumper-go（使用最新版本）
          wget -q $(curl -s https://api.github.com/repos/ssut/payload-dumper-go/releases/latest | grep "browser_download_url" | grep "linux_amd64" | cut -d '"' -f 4) || { echo "❌ 下载 payload-dumper-go 失败"; exit 1; }
          tar -xzf payload-dumper-go_*.tar.gz || { echo "❌ 解压 payload-dumper-go 失败"; exit 1; }
          chmod +x payload-dumper-go
          sudo mv payload-dumper-go /usr/local/bin/
          BUILD_TIME=$(TZ=Asia/Shanghai date +"%m%d%H%M")
          echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_ENV

      - name: 检测并替换下载链接
        run: |
          # 检查输入的 ROM URL 是否包含 bigota.d.miui.com
          if [[ "${{ github.event.inputs.rom_url }}" == *"bigota.d.miui.com"* ]]; then
          echo "发现小米链接替换域名"
            NEW_ROM_URL="${{ github.event.inputs.rom_url }}"
            NEW_ROM_URL="${NEW_ROM_URL//bigota.d.miui.com/bkt-sgp-miui-ota-update-alisgp.oss-ap-southeast-1.aliyuncs.com}"
            echo "ROM_URL=$NEW_ROM_URL" >> $GITHUB_ENV
          else
            echo "ROM_URL=${{ github.event.inputs.rom_url }}" >> $GITHUB_ENV
          fi

      - name: 下载并解压 ROM
        run: |
          mkdir -p ~/rom_extract
          aria2c -s 16 -x 16 --max-tries=3 --retry-wait=5 --max-connection-per-server=16 --min-split-size=1M --split=16 --continue=true --optimize-concurrent-downloads=true --disk-cache=64M --summary-interval=0 -d ~/rom_extract -o firmware.zip "${{ env.ROM_URL }}" || { echo "❌ ROM 下载失败"; exit 1; }
          unzip -o ~/rom_extract/firmware.zip -d ~/rom_extract || { echo "❌ ROM 解压失败"; exit 1; }

      - name: 提取 boot.img 和 init_boot.img
        run: |
          mkdir -p ~/extracted_images
          # 查找 payload.bin 文件
          PAYLOAD_PATH=$(find ~/rom_extract -name "payload.bin" | head -n 1)
          if [ -z "$PAYLOAD_PATH" ]; then
            echo "❌ 未找到 payload.bin 文件"
            exit 1
          fi
          # 提取 boot.img 和 init_boot.img
          payload-dumper-go -o ~/extracted_images -p boot $PAYLOAD_PATH || { echo "❌ boot.img 提取失败"; exit 1; }
          payload-dumper-go -o ~/extracted_images -p init_boot $PAYLOAD_PATH || { echo "❌ init_boot.img 提取失败"; exit 1; }
          # 检查是否提取成功
          if [ ! -f ~/extracted_images/boot.img ] && [ ! -f ~/extracted_images/init_boot.img ]; then
            echo "❌ 未找到 boot.img 或 init_boot.img"
            exit 1
          fi
          # 如果存在 init_boot.img，则删除 boot.img
          if [ -f ~/extracted_images/init_boot.img ]; then
            echo "✅ init_boot.img 已提取，删除 boot.img"
            rm -f ~/extracted_images/boot.img
          fi

      - name: 生成信息文件
        run: |
          echo "提交日期：$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')" > info.md
          echo "ROM 下载直链：${{ github.event.inputs.rom_url }}" >> info.md
          echo "提取的文件：" >> info.md
          ls -lh ~/extracted_images/*.img 2>/dev/null | awk '{print $9 " - " $5}' >> info.md

      - name: 上传镜像及信息
        uses: ncipollo/release-action@v1.12.0
        with:
          artifacts: |
            ~/extracted_images/*
            info.md
          bodyfile: "info.md"
          tag: "EXTRACT_${{ env.BUILD_TIME }}_${{ github.run_id }}"
          token: ${{ secrets.GITHUB_TOKEN }}
